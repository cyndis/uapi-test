/* automatically generated by rust-bindgen */

pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const DRM_IOCTL_BASE: u8 = 100u8;
pub const DRM_COMMAND_BASE: u32 = 64;
pub const DRM_TEGRA_GEM_CREATE_TILED: u32 = 1;
pub const DRM_TEGRA_GEM_CREATE_BOTTOM_UP: u32 = 2;
pub const DRM_TEGRA_NO_TIMEOUT: u32 = 4294967295;
pub const DRM_TEGRA_GEM_TILING_MODE_PITCH: u32 = 0;
pub const DRM_TEGRA_GEM_TILING_MODE_TILED: u32 = 1;
pub const DRM_TEGRA_GEM_TILING_MODE_BLOCK: u32 = 2;
pub const DRM_TEGRA_GEM_BOTTOM_UP: u32 = 1;
pub const DRM_TEGRA_GEM_FLAGS: u32 = 1;
pub const DRM_TEGRA_GEM_CREATE: u32 = 0;
pub const DRM_TEGRA_GEM_MMAP: u32 = 1;
pub const DRM_TEGRA_SYNCPT_READ: u32 = 2;
pub const DRM_TEGRA_SYNCPT_INCR: u32 = 3;
pub const DRM_TEGRA_SYNCPT_WAIT: u32 = 4;
pub const DRM_TEGRA_OPEN_CHANNEL: u32 = 5;
pub const DRM_TEGRA_CLOSE_CHANNEL: u32 = 6;
pub const DRM_TEGRA_GET_SYNCPT: u32 = 7;
pub const DRM_TEGRA_SUBMIT: u32 = 8;
pub const DRM_TEGRA_GET_SYNCPT_BASE: u32 = 9;
pub const DRM_TEGRA_GEM_SET_TILING: u32 = 10;
pub const DRM_TEGRA_GEM_GET_TILING: u32 = 11;
pub const DRM_TEGRA_GEM_SET_FLAGS: u32 = 12;
pub const DRM_TEGRA_GEM_GET_FLAGS: u32 = 13;
pub const DRM_TEGRA_CHANNEL_CAP_CACHE_COHERENT: u32 = 1;
pub const DRM_TEGRA_CHANNEL_MAP_READ: u32 = 1;
pub const DRM_TEGRA_CHANNEL_MAP_WRITE: u32 = 2;
pub const DRM_TEGRA_CHANNEL_MAP_READ_WRITE: u32 = 3;
pub const DRM_TEGRA_SUBMIT_RELOC_SECTOR_LAYOUT: u32 = 1;
pub const DRM_TEGRA_SUBMIT_CMD_GATHER_UPTR: u32 = 0;
pub const DRM_TEGRA_SUBMIT_CMD_WAIT_SYNCPT: u32 = 1;
pub const DRM_TEGRA_SUBMIT_CMD_WAIT_SYNCPT_RELATIVE: u32 = 2;
pub const DRM_SYNCOBJ_CREATE_SIGNALED: u32 = 1;
pub const DRM_SYNCOBJ_WAIT_FLAGS_WAIT_ALL: u32 = 1;
pub const DRM_SYNCOBJ_WAIT_FLAGS_WAIT_FOR_SUBMIT: u32 = 2;
pub const DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE: u32 = 4;
pub const DRM_VGEM_FENCE_ATTACH: u32 = 1;
pub const DRM_VGEM_FENCE_SIGNAL: u32 = 2;
pub const VGEM_FENCE_WRITE: u32 = 1;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[doc = " struct drm_tegra_gem_create - parameters for the GEM object creation IOCTL"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_gem_create {
    #[doc = " @size:"]
    #[doc = ""]
    #[doc = " The size, in bytes, of the buffer object to be created."]
    pub size: __u64,
    #[doc = " @flags:"]
    #[doc = ""]
    #[doc = " A bitmask of flags that influence the creation of GEM objects:"]
    #[doc = ""]
    #[doc = " DRM_TEGRA_GEM_CREATE_TILED"]
    #[doc = "   Use the 16x16 tiling format for this buffer."]
    #[doc = ""]
    #[doc = " DRM_TEGRA_GEM_CREATE_BOTTOM_UP"]
    #[doc = "   The buffer has a bottom-up layout."]
    pub flags: __u32,
    #[doc = " @handle:"]
    #[doc = ""]
    #[doc = " The handle of the created GEM object. Set by the kernel upon"]
    #[doc = " successful completion of the IOCTL."]
    pub handle: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_gem_create() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_gem_create>(),
        16usize,
        concat!("Size of: ", stringify!(drm_tegra_gem_create))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_gem_create>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_tegra_gem_create))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_create>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_create),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_create>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_create),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_create>())).handle as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_create),
            "::",
            stringify!(handle)
        )
    );
}
#[doc = " struct drm_tegra_gem_mmap - parameters for the GEM mmap IOCTL"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_gem_mmap {
    #[doc = " @handle:"]
    #[doc = ""]
    #[doc = " Handle of the GEM object to obtain an mmap offset for."]
    pub handle: __u32,
    #[doc = " @pad:"]
    #[doc = ""]
    #[doc = " Structure padding that may be used in the future. Must be 0."]
    pub pad: __u32,
    #[doc = " @offset:"]
    #[doc = ""]
    #[doc = " The mmap offset for the given GEM object. Set by the kernel upon"]
    #[doc = " successful completion of the IOCTL."]
    pub offset: __u64,
}
#[test]
fn bindgen_test_layout_drm_tegra_gem_mmap() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_gem_mmap>(),
        16usize,
        concat!("Size of: ", stringify!(drm_tegra_gem_mmap))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_gem_mmap>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_tegra_gem_mmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_mmap>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_mmap),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_mmap>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_mmap),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_mmap>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_mmap),
            "::",
            stringify!(offset)
        )
    );
}
#[doc = " struct drm_tegra_syncpt_read - parameters for the read syncpoint IOCTL"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_syncpt_read {
    #[doc = " @id:"]
    #[doc = ""]
    #[doc = " ID of the syncpoint to read the current value from."]
    pub id: __u32,
    #[doc = " @value:"]
    #[doc = ""]
    #[doc = " The current syncpoint value. Set by the kernel upon successful"]
    #[doc = " completion of the IOCTL."]
    pub value: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_syncpt_read() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_syncpt_read>(),
        8usize,
        concat!("Size of: ", stringify!(drm_tegra_syncpt_read))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_syncpt_read>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_syncpt_read))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_syncpt_read>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpt_read),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_syncpt_read>())).value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpt_read),
            "::",
            stringify!(value)
        )
    );
}
#[doc = " struct drm_tegra_syncpt_incr - parameters for the increment syncpoint IOCTL"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_syncpt_incr {
    #[doc = " @id:"]
    #[doc = ""]
    #[doc = " ID of the syncpoint to increment."]
    pub id: __u32,
    #[doc = " @pad:"]
    #[doc = ""]
    #[doc = " Structure padding that may be used in the future. Must be 0."]
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_syncpt_incr() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_syncpt_incr>(),
        8usize,
        concat!("Size of: ", stringify!(drm_tegra_syncpt_incr))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_syncpt_incr>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_syncpt_incr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_syncpt_incr>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpt_incr),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_syncpt_incr>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpt_incr),
            "::",
            stringify!(pad)
        )
    );
}
#[doc = " struct drm_tegra_syncpt_wait - parameters for the wait syncpoint IOCTL"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_syncpt_wait {
    #[doc = " @id:"]
    #[doc = ""]
    #[doc = " ID of the syncpoint to wait on."]
    pub id: __u32,
    #[doc = " @thresh:"]
    #[doc = ""]
    #[doc = " Threshold value for which to wait."]
    pub thresh: __u32,
    #[doc = " @timeout:"]
    #[doc = ""]
    #[doc = " Timeout, in milliseconds, to wait."]
    pub timeout: __u32,
    #[doc = " @value:"]
    #[doc = ""]
    #[doc = " The new syncpoint value after the wait. Set by the kernel upon"]
    #[doc = " successful completion of the IOCTL."]
    pub value: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_syncpt_wait() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_syncpt_wait>(),
        16usize,
        concat!("Size of: ", stringify!(drm_tegra_syncpt_wait))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_syncpt_wait>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_syncpt_wait))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_syncpt_wait>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpt_wait),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_syncpt_wait>())).thresh as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpt_wait),
            "::",
            stringify!(thresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_syncpt_wait>())).timeout as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpt_wait),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_syncpt_wait>())).value as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpt_wait),
            "::",
            stringify!(value)
        )
    );
}
#[doc = " struct drm_tegra_open_channel - parameters for the open channel IOCTL"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_open_channel {
    #[doc = " @client:"]
    #[doc = ""]
    #[doc = " The client ID for this channel."]
    pub client: __u32,
    #[doc = " @pad:"]
    #[doc = ""]
    #[doc = " Structure padding that may be used in the future. Must be 0."]
    pub pad: __u32,
    #[doc = " @context:"]
    #[doc = ""]
    #[doc = " The application context of this channel. Set by the kernel upon"]
    #[doc = " successful completion of the IOCTL. This context needs to be passed"]
    #[doc = " to the DRM_TEGRA_CHANNEL_CLOSE or the DRM_TEGRA_SUBMIT IOCTLs."]
    pub context: __u64,
}
#[test]
fn bindgen_test_layout_drm_tegra_open_channel() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_open_channel>(),
        16usize,
        concat!("Size of: ", stringify!(drm_tegra_open_channel))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_open_channel>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_tegra_open_channel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_open_channel>())).client as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_open_channel),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_open_channel>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_open_channel),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_open_channel>())).context as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_open_channel),
            "::",
            stringify!(context)
        )
    );
}
#[doc = " struct drm_tegra_close_channel - parameters for the close channel IOCTL"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_close_channel {
    #[doc = " @context:"]
    #[doc = ""]
    #[doc = " The application context of this channel. This is obtained from the"]
    #[doc = " DRM_TEGRA_OPEN_CHANNEL IOCTL."]
    pub context: __u64,
}
#[test]
fn bindgen_test_layout_drm_tegra_close_channel() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_close_channel>(),
        8usize,
        concat!("Size of: ", stringify!(drm_tegra_close_channel))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_close_channel>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_tegra_close_channel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_close_channel>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_close_channel),
            "::",
            stringify!(context)
        )
    );
}
#[doc = " struct drm_tegra_get_syncpt - parameters for the get syncpoint IOCTL"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_get_syncpt {
    #[doc = " @context:"]
    #[doc = ""]
    #[doc = " The application context identifying the channel for which to obtain"]
    #[doc = " the syncpoint ID."]
    pub context: __u64,
    #[doc = " @index:"]
    #[doc = ""]
    #[doc = " Index of the client syncpoint for which to obtain the ID."]
    pub index: __u32,
    #[doc = " @id:"]
    #[doc = ""]
    #[doc = " The ID of the given syncpoint. Set by the kernel upon successful"]
    #[doc = " completion of the IOCTL."]
    pub id: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_get_syncpt() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_get_syncpt>(),
        16usize,
        concat!("Size of: ", stringify!(drm_tegra_get_syncpt))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_get_syncpt>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_tegra_get_syncpt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_get_syncpt>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_get_syncpt),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_get_syncpt>())).index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_get_syncpt),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_get_syncpt>())).id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_get_syncpt),
            "::",
            stringify!(id)
        )
    );
}
#[doc = " struct drm_tegra_get_syncpt_base - parameters for the get wait base IOCTL"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_get_syncpt_base {
    #[doc = " @context:"]
    #[doc = ""]
    #[doc = " The application context identifying for which channel to obtain the"]
    #[doc = " wait base."]
    pub context: __u64,
    #[doc = " @syncpt:"]
    #[doc = ""]
    #[doc = " ID of the syncpoint for which to obtain the wait base."]
    pub syncpt: __u32,
    #[doc = " @id:"]
    #[doc = ""]
    #[doc = " The ID of the wait base corresponding to the client syncpoint. Set"]
    #[doc = " by the kernel upon successful completion of the IOCTL."]
    pub id: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_get_syncpt_base() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_get_syncpt_base>(),
        16usize,
        concat!("Size of: ", stringify!(drm_tegra_get_syncpt_base))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_get_syncpt_base>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_tegra_get_syncpt_base))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_get_syncpt_base>())).context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_get_syncpt_base),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_get_syncpt_base>())).syncpt as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_get_syncpt_base),
            "::",
            stringify!(syncpt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_get_syncpt_base>())).id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_get_syncpt_base),
            "::",
            stringify!(id)
        )
    );
}
#[doc = " struct drm_tegra_syncpt - syncpoint increment operation"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_syncpt {
    #[doc = " @id:"]
    #[doc = ""]
    #[doc = " ID of the syncpoint to operate on."]
    pub id: __u32,
    #[doc = " @incrs:"]
    #[doc = ""]
    #[doc = " Number of increments to perform for the syncpoint."]
    pub incrs: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_syncpt() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_syncpt>(),
        8usize,
        concat!("Size of: ", stringify!(drm_tegra_syncpt))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_syncpt>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_syncpt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_syncpt>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpt),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_syncpt>())).incrs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpt),
            "::",
            stringify!(incrs)
        )
    );
}
#[doc = " struct drm_tegra_cmdbuf - structure describing a command buffer"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_cmdbuf {
    #[doc = " @handle:"]
    #[doc = ""]
    #[doc = " Handle to a GEM object containing the command buffer."]
    pub handle: __u32,
    #[doc = " @offset:"]
    #[doc = ""]
    #[doc = " Offset, in bytes, into the GEM object identified by @handle at"]
    #[doc = " which the command buffer starts."]
    pub offset: __u32,
    #[doc = " @words:"]
    #[doc = ""]
    #[doc = " Number of 32-bit words in this command buffer."]
    pub words: __u32,
    #[doc = " @pad:"]
    #[doc = ""]
    #[doc = " Structure padding that may be used in the future. Must be 0."]
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_cmdbuf() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_cmdbuf>(),
        16usize,
        concat!("Size of: ", stringify!(drm_tegra_cmdbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_cmdbuf>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_cmdbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_cmdbuf>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_cmdbuf),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_cmdbuf>())).offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_cmdbuf),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_cmdbuf>())).words as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_cmdbuf),
            "::",
            stringify!(words)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_cmdbuf>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_cmdbuf),
            "::",
            stringify!(pad)
        )
    );
}
#[doc = " struct drm_tegra_reloc - GEM object relocation structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_reloc {
    pub cmdbuf: drm_tegra_reloc__bindgen_ty_1,
    pub target: drm_tegra_reloc__bindgen_ty_2,
    #[doc = " @shift:"]
    #[doc = ""]
    #[doc = " The number of bits by which to shift relocated addresses."]
    pub shift: __u32,
    #[doc = " @pad:"]
    #[doc = ""]
    #[doc = " Structure padding that may be used in the future. Must be 0."]
    pub pad: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_reloc__bindgen_ty_1 {
    #[doc = " @cmdbuf.handle:"]
    #[doc = ""]
    #[doc = " Handle to the GEM object containing the command buffer for"]
    #[doc = " which to perform this GEM object relocation."]
    pub handle: __u32,
    #[doc = " @cmdbuf.offset:"]
    #[doc = ""]
    #[doc = " Offset, in bytes, into the command buffer at which to"]
    #[doc = " insert the relocated address."]
    pub offset: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_reloc__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_reloc__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(drm_tegra_reloc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_reloc__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_reloc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_reloc__bindgen_ty_1>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_reloc__bindgen_ty_1),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_reloc__bindgen_ty_1>())).offset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_reloc__bindgen_ty_1),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_reloc__bindgen_ty_2 {
    #[doc = " @target.handle:"]
    #[doc = ""]
    #[doc = " Handle to the GEM object to be relocated."]
    pub handle: __u32,
    #[doc = " @target.offset:"]
    #[doc = ""]
    #[doc = " Offset, in bytes, into the target GEM object at which the"]
    #[doc = " relocated data starts."]
    pub offset: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_reloc__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_reloc__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(drm_tegra_reloc__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_reloc__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_reloc__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_reloc__bindgen_ty_2>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_reloc__bindgen_ty_2),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_reloc__bindgen_ty_2>())).offset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_reloc__bindgen_ty_2),
            "::",
            stringify!(offset)
        )
    );
}
#[test]
fn bindgen_test_layout_drm_tegra_reloc() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_reloc>(),
        24usize,
        concat!("Size of: ", stringify!(drm_tegra_reloc))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_reloc>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_reloc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_reloc>())).cmdbuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_reloc),
            "::",
            stringify!(cmdbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_reloc>())).target as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_reloc),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_reloc>())).shift as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_reloc),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_reloc>())).pad as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_reloc),
            "::",
            stringify!(pad)
        )
    );
}
#[doc = " struct drm_tegra_waitchk - wait check structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_waitchk {
    #[doc = " @handle:"]
    #[doc = ""]
    #[doc = " Handle to the GEM object containing a command stream on which to"]
    #[doc = " perform the wait check."]
    pub handle: __u32,
    #[doc = " @offset:"]
    #[doc = ""]
    #[doc = " Offset, in bytes, of the location in the command stream to perform"]
    #[doc = " the wait check on."]
    pub offset: __u32,
    #[doc = " @syncpt:"]
    #[doc = ""]
    #[doc = " ID of the syncpoint to wait check."]
    pub syncpt: __u32,
    #[doc = " @thresh:"]
    #[doc = ""]
    #[doc = " Threshold value for which to check."]
    pub thresh: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_waitchk() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_waitchk>(),
        16usize,
        concat!("Size of: ", stringify!(drm_tegra_waitchk))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_waitchk>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_waitchk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_waitchk>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_waitchk),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_waitchk>())).offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_waitchk),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_waitchk>())).syncpt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_waitchk),
            "::",
            stringify!(syncpt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_waitchk>())).thresh as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_waitchk),
            "::",
            stringify!(thresh)
        )
    );
}
#[doc = " struct drm_tegra_submit - job submission structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_submit {
    #[doc = " @context:"]
    #[doc = ""]
    #[doc = " The application context identifying the channel to use for the"]
    #[doc = " execution of this job."]
    pub context: __u64,
    #[doc = " @num_syncpts:"]
    #[doc = ""]
    #[doc = " The number of syncpoints operated on by this job. This defines the"]
    #[doc = " length of the array pointed to by @syncpts."]
    pub num_syncpts: __u32,
    #[doc = " @num_cmdbufs:"]
    #[doc = ""]
    #[doc = " The number of command buffers to execute as part of this job. This"]
    #[doc = " defines the length of the array pointed to by @cmdbufs."]
    pub num_cmdbufs: __u32,
    #[doc = " @num_relocs:"]
    #[doc = ""]
    #[doc = " The number of relocations to perform before executing this job."]
    #[doc = " This defines the length of the array pointed to by @relocs."]
    pub num_relocs: __u32,
    #[doc = " @num_waitchks:"]
    #[doc = ""]
    #[doc = " The number of wait checks to perform as part of this job. This"]
    #[doc = " defines the length of the array pointed to by @waitchks."]
    pub num_waitchks: __u32,
    #[doc = " @waitchk_mask:"]
    #[doc = ""]
    #[doc = " Bitmask of valid wait checks."]
    pub waitchk_mask: __u32,
    #[doc = " @timeout:"]
    #[doc = ""]
    #[doc = " Timeout, in milliseconds, before this job is cancelled."]
    pub timeout: __u32,
    #[doc = " @syncpts:"]
    #[doc = ""]
    #[doc = " A pointer to an array of &struct drm_tegra_syncpt structures that"]
    #[doc = " specify the syncpoint operations performed as part of this job."]
    #[doc = " The number of elements in the array must be equal to the value"]
    #[doc = " given by @num_syncpts."]
    pub syncpts: __u64,
    #[doc = " @cmdbufs:"]
    #[doc = ""]
    #[doc = " A pointer to an array of &struct drm_tegra_cmdbuf structures that"]
    #[doc = " define the command buffers to execute as part of this job. The"]
    #[doc = " number of elements in the array must be equal to the value given"]
    #[doc = " by @num_syncpts."]
    pub cmdbufs: __u64,
    #[doc = " @relocs:"]
    #[doc = ""]
    #[doc = " A pointer to an array of &struct drm_tegra_reloc structures that"]
    #[doc = " specify the relocations that need to be performed before executing"]
    #[doc = " this job. The number of elements in the array must be equal to the"]
    #[doc = " value given by @num_relocs."]
    pub relocs: __u64,
    #[doc = " @waitchks:"]
    #[doc = ""]
    #[doc = " A pointer to an array of &struct drm_tegra_waitchk structures that"]
    #[doc = " specify the wait checks to be performed while executing this job."]
    #[doc = " The number of elements in the array must be equal to the value"]
    #[doc = " given by @num_waitchks."]
    pub waitchks: __u64,
    #[doc = " @fence:"]
    #[doc = ""]
    #[doc = " The threshold of the syncpoint associated with this job after it"]
    #[doc = " has been completed. Set by the kernel upon successful completion of"]
    #[doc = " the IOCTL. This can be used with the DRM_TEGRA_SYNCPT_WAIT IOCTL to"]
    #[doc = " wait for this job to be finished."]
    pub fence: __u32,
    #[doc = " @reserved:"]
    #[doc = ""]
    #[doc = " This field is reserved for future use. Must be 0."]
    pub reserved: [__u32; 5usize],
}
#[test]
fn bindgen_test_layout_drm_tegra_submit() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_submit>(),
        88usize,
        concat!("Size of: ", stringify!(drm_tegra_submit))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_submit>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_tegra_submit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit>())).num_syncpts as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit),
            "::",
            stringify!(num_syncpts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit>())).num_cmdbufs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit),
            "::",
            stringify!(num_cmdbufs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit>())).num_relocs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit),
            "::",
            stringify!(num_relocs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit>())).num_waitchks as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit),
            "::",
            stringify!(num_waitchks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit>())).waitchk_mask as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit),
            "::",
            stringify!(waitchk_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit>())).timeout as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit>())).syncpts as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit),
            "::",
            stringify!(syncpts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit>())).cmdbufs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit),
            "::",
            stringify!(cmdbufs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit>())).relocs as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit),
            "::",
            stringify!(relocs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit>())).waitchks as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit),
            "::",
            stringify!(waitchks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit>())).fence as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit>())).reserved as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = " struct drm_tegra_gem_set_tiling - parameters for the set tiling IOCTL"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_gem_set_tiling {
    #[doc = " @handle:"]
    #[doc = ""]
    #[doc = " Handle to the GEM object for which to set the tiling parameters."]
    pub handle: __u32,
    #[doc = " @mode:"]
    #[doc = ""]
    #[doc = " The tiling mode to set. Must be one of:"]
    #[doc = ""]
    #[doc = " DRM_TEGRA_GEM_TILING_MODE_PITCH"]
    #[doc = "   pitch linear format"]
    #[doc = ""]
    #[doc = " DRM_TEGRA_GEM_TILING_MODE_TILED"]
    #[doc = "   16x16 tiling format"]
    #[doc = ""]
    #[doc = " DRM_TEGRA_GEM_TILING_MODE_BLOCK"]
    #[doc = "   16Bx2 tiling format"]
    pub mode: __u32,
    #[doc = " @value:"]
    #[doc = ""]
    #[doc = " The value to set for the tiling mode parameter."]
    pub value: __u32,
    #[doc = " @pad:"]
    #[doc = ""]
    #[doc = " Structure padding that may be used in the future. Must be 0."]
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_gem_set_tiling() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_gem_set_tiling>(),
        16usize,
        concat!("Size of: ", stringify!(drm_tegra_gem_set_tiling))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_gem_set_tiling>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_gem_set_tiling))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_set_tiling>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_set_tiling),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_set_tiling>())).mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_set_tiling),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_set_tiling>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_set_tiling),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_set_tiling>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_set_tiling),
            "::",
            stringify!(pad)
        )
    );
}
#[doc = " struct drm_tegra_gem_get_tiling - parameters for the get tiling IOCTL"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_gem_get_tiling {
    #[doc = " @handle:"]
    #[doc = ""]
    #[doc = " Handle to the GEM object for which to query the tiling parameters."]
    pub handle: __u32,
    #[doc = " @mode:"]
    #[doc = ""]
    #[doc = " The tiling mode currently associated with the GEM object. Set by"]
    #[doc = " the kernel upon successful completion of the IOCTL."]
    pub mode: __u32,
    #[doc = " @value:"]
    #[doc = ""]
    #[doc = " The tiling mode parameter currently associated with the GEM object."]
    #[doc = " Set by the kernel upon successful completion of the IOCTL."]
    pub value: __u32,
    #[doc = " @pad:"]
    #[doc = ""]
    #[doc = " Structure padding that may be used in the future. Must be 0."]
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_gem_get_tiling() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_gem_get_tiling>(),
        16usize,
        concat!("Size of: ", stringify!(drm_tegra_gem_get_tiling))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_gem_get_tiling>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_gem_get_tiling))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_get_tiling>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_get_tiling),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_get_tiling>())).mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_get_tiling),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_get_tiling>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_get_tiling),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_get_tiling>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_get_tiling),
            "::",
            stringify!(pad)
        )
    );
}
#[doc = " struct drm_tegra_gem_set_flags - parameters for the set flags IOCTL"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_gem_set_flags {
    #[doc = " @handle:"]
    #[doc = ""]
    #[doc = " Handle to the GEM object for which to set the flags."]
    pub handle: __u32,
    #[doc = " @flags:"]
    #[doc = ""]
    #[doc = " The flags to set for the GEM object."]
    pub flags: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_gem_set_flags() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_gem_set_flags>(),
        8usize,
        concat!("Size of: ", stringify!(drm_tegra_gem_set_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_gem_set_flags>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_gem_set_flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_set_flags>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_set_flags),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_set_flags>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_set_flags),
            "::",
            stringify!(flags)
        )
    );
}
#[doc = " struct drm_tegra_gem_get_flags - parameters for the get flags IOCTL"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_gem_get_flags {
    #[doc = " @handle:"]
    #[doc = ""]
    #[doc = " Handle to the GEM object for which to query the flags."]
    pub handle: __u32,
    #[doc = " @flags:"]
    #[doc = ""]
    #[doc = " The flags currently associated with the GEM object. Set by the"]
    #[doc = " kernel upon successful completion of the IOCTL."]
    pub flags: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_gem_get_flags() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_gem_get_flags>(),
        8usize,
        concat!("Size of: ", stringify!(drm_tegra_gem_get_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_gem_get_flags>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_gem_get_flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_get_flags>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_get_flags),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_gem_get_flags>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_gem_get_flags),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_channel_open {
    #[doc = " @host1x_class: [in]"]
    #[doc = ""]
    #[doc = " Host1x class of the engine that will be programmed using this"]
    #[doc = " channel."]
    pub host1x_class: __u32,
    #[doc = " @flags: [in]"]
    #[doc = ""]
    #[doc = " Flags."]
    pub flags: __u32,
    #[doc = " @context: [out]"]
    #[doc = ""]
    #[doc = " Opaque identifier corresponding to the opened channel."]
    pub context: __u32,
    #[doc = " @version: [out]"]
    #[doc = ""]
    #[doc = " Version of the engine hardware. This can be used by userspace"]
    #[doc = " to determine how the engine needs to be programmed."]
    pub version: __u32,
    #[doc = " @capabilities: [out]"]
    #[doc = ""]
    #[doc = " Flags describing the hardware capabilities."]
    pub capabilities: __u32,
    pub padding: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_channel_open() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_channel_open>(),
        24usize,
        concat!("Size of: ", stringify!(drm_tegra_channel_open))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_channel_open>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_channel_open))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_channel_open>())).host1x_class as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_open),
            "::",
            stringify!(host1x_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_channel_open>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_open),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_channel_open>())).context as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_open),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_channel_open>())).version as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_open),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_channel_open>())).capabilities as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_open),
            "::",
            stringify!(capabilities)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_channel_open>())).padding as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_open),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_channel_close {
    #[doc = " @context: [in]"]
    #[doc = ""]
    #[doc = " Identifier of the channel to close."]
    pub context: __u32,
    pub padding: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_channel_close() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_channel_close>(),
        8usize,
        concat!("Size of: ", stringify!(drm_tegra_channel_close))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_channel_close>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_channel_close))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_channel_close>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_close),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_channel_close>())).padding as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_close),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_channel_map {
    #[doc = " @context: [in]"]
    #[doc = ""]
    #[doc = " Identifier of the channel to which make memory available for."]
    pub context: __u32,
    #[doc = " @handle: [in]"]
    #[doc = ""]
    #[doc = " GEM handle of the memory to map."]
    pub handle: __u32,
    #[doc = " @flags: [in]"]
    #[doc = ""]
    #[doc = " Flags."]
    pub flags: __u32,
    #[doc = " @mapping: [out]"]
    #[doc = ""]
    #[doc = " Identifier corresponding to the mapping, to be used for"]
    #[doc = " relocations or unmapping later."]
    pub mapping: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_channel_map() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_channel_map>(),
        16usize,
        concat!("Size of: ", stringify!(drm_tegra_channel_map))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_channel_map>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_channel_map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_channel_map>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_map),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_channel_map>())).handle as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_map),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_channel_map>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_map),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_channel_map>())).mapping as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_map),
            "::",
            stringify!(mapping)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_channel_unmap {
    #[doc = " @context: [in]"]
    #[doc = ""]
    #[doc = " Channel identifier of the channel to unmap memory from."]
    pub context: __u32,
    #[doc = " @mapping: [in]"]
    #[doc = ""]
    #[doc = " Mapping identifier of the memory mapping to unmap."]
    pub mapping: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_channel_unmap() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_channel_unmap>(),
        8usize,
        concat!("Size of: ", stringify!(drm_tegra_channel_unmap))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_channel_unmap>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_channel_unmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_channel_unmap>())).context as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_unmap),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_channel_unmap>())).mapping as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_unmap),
            "::",
            stringify!(mapping)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_submit_buf {
    #[doc = " @mapping: [in]"]
    #[doc = ""]
    #[doc = " Identifier of the mapping to use in the submission."]
    pub mapping: __u32,
    #[doc = " @flags: [in]"]
    #[doc = ""]
    #[doc = " Flags."]
    pub flags: __u32,
    pub reloc: drm_tegra_submit_buf__bindgen_ty_1,
}
#[doc = " Information for relocation patching."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_submit_buf__bindgen_ty_1 {
    #[doc = " @target_offset: [in]"]
    #[doc = ""]
    #[doc = " Offset from the start of the mapping of the data whose"]
    #[doc = " address is to be patched into the gather."]
    pub target_offset: __u64,
    #[doc = " @gather_offset_words: [in]"]
    #[doc = ""]
    #[doc = " Offset in words from the start of the gather data to"]
    #[doc = " where the address should be patched into."]
    pub gather_offset_words: __u32,
    #[doc = " @shift: [in]"]
    #[doc = ""]
    #[doc = " Number of bits the address should be shifted right before"]
    #[doc = " patching in."]
    pub shift: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_submit_buf__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_submit_buf__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(drm_tegra_submit_buf__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_submit_buf__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(drm_tegra_submit_buf__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_submit_buf__bindgen_ty_1>())).target_offset as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_buf__bindgen_ty_1),
            "::",
            stringify!(target_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_submit_buf__bindgen_ty_1>())).gather_offset_words
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_buf__bindgen_ty_1),
            "::",
            stringify!(gather_offset_words)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_submit_buf__bindgen_ty_1>())).shift as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_buf__bindgen_ty_1),
            "::",
            stringify!(shift)
        )
    );
}
#[test]
fn bindgen_test_layout_drm_tegra_submit_buf() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_submit_buf>(),
        24usize,
        concat!("Size of: ", stringify!(drm_tegra_submit_buf))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_submit_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_tegra_submit_buf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit_buf>())).mapping as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_buf),
            "::",
            stringify!(mapping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit_buf>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_buf),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit_buf>())).reloc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_buf),
            "::",
            stringify!(reloc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_submit_cmd_gather_uptr {
    pub words: __u32,
    pub reserved: [__u32; 3usize],
}
#[test]
fn bindgen_test_layout_drm_tegra_submit_cmd_gather_uptr() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_submit_cmd_gather_uptr>(),
        16usize,
        concat!("Size of: ", stringify!(drm_tegra_submit_cmd_gather_uptr))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_submit_cmd_gather_uptr>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(drm_tegra_submit_cmd_gather_uptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_submit_cmd_gather_uptr>())).words as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_cmd_gather_uptr),
            "::",
            stringify!(words)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_submit_cmd_gather_uptr>())).reserved as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_cmd_gather_uptr),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_submit_cmd_wait_syncpt {
    pub id: __u32,
    pub value: __u32,
    pub reserved: [__u32; 2usize],
}
#[test]
fn bindgen_test_layout_drm_tegra_submit_cmd_wait_syncpt() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_submit_cmd_wait_syncpt>(),
        16usize,
        concat!("Size of: ", stringify!(drm_tegra_submit_cmd_wait_syncpt))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_submit_cmd_wait_syncpt>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(drm_tegra_submit_cmd_wait_syncpt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_submit_cmd_wait_syncpt>())).id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_cmd_wait_syncpt),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_submit_cmd_wait_syncpt>())).value as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_cmd_wait_syncpt),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_submit_cmd_wait_syncpt>())).reserved as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_cmd_wait_syncpt),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct drm_tegra_submit_cmd {
    #[doc = " @type: [in]"]
    #[doc = ""]
    #[doc = " Command type to execute. One of the DRM_TEGRA_SUBMIT_CMD*"]
    #[doc = " defines."]
    pub type_: __u32,
    #[doc = " @flags: [in]"]
    #[doc = ""]
    #[doc = " Flags."]
    pub flags: __u32,
    pub __bindgen_anon_1: drm_tegra_submit_cmd__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union drm_tegra_submit_cmd__bindgen_ty_1 {
    pub gather_uptr: drm_tegra_submit_cmd_gather_uptr,
    pub wait_syncpt: drm_tegra_submit_cmd_wait_syncpt,
    pub reserved: [__u32; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_drm_tegra_submit_cmd__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_submit_cmd__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(drm_tegra_submit_cmd__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_submit_cmd__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(drm_tegra_submit_cmd__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_submit_cmd__bindgen_ty_1>())).gather_uptr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_cmd__bindgen_ty_1),
            "::",
            stringify!(gather_uptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_submit_cmd__bindgen_ty_1>())).wait_syncpt as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_cmd__bindgen_ty_1),
            "::",
            stringify!(wait_syncpt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_submit_cmd__bindgen_ty_1>())).reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_cmd__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_drm_tegra_submit_cmd() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_submit_cmd>(),
        24usize,
        concat!("Size of: ", stringify!(drm_tegra_submit_cmd))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_submit_cmd>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_submit_cmd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit_cmd>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_cmd),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit_cmd>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_cmd),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_submit_syncpt {
    #[doc = " @id: [in]"]
    #[doc = ""]
    #[doc = " ID of the syncpoint that the job will increment."]
    pub id: __u32,
    #[doc = " @flags: [in]"]
    #[doc = ""]
    #[doc = " Flags."]
    pub flags: __u32,
    #[doc = " @increments: [in]"]
    #[doc = ""]
    #[doc = " Number of times the job will increment this syncpoint."]
    pub increments: __u32,
    #[doc = " @value: [out]"]
    #[doc = ""]
    #[doc = " Value the syncpoint will have once the job has completed all"]
    #[doc = " its specified syncpoint increments."]
    #[doc = ""]
    #[doc = " Note that the kernel may increment the syncpoint before or after"]
    #[doc = " the job. These increments are not reflected in this field."]
    #[doc = ""]
    #[doc = " If the job hangs or times out, not all of the increments may"]
    #[doc = " get executed."]
    pub value: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_submit_syncpt() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_submit_syncpt>(),
        16usize,
        concat!("Size of: ", stringify!(drm_tegra_submit_syncpt))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_submit_syncpt>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_submit_syncpt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit_syncpt>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_syncpt),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit_syncpt>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_syncpt),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_submit_syncpt>())).increments as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_syncpt),
            "::",
            stringify!(increments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_submit_syncpt>())).value as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_submit_syncpt),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_channel_submit {
    #[doc = " @context: [in]"]
    #[doc = ""]
    #[doc = " Identifier of the channel to submit this job to."]
    pub context: __u32,
    #[doc = " @num_bufs: [in]"]
    #[doc = ""]
    #[doc = " Number of elements in the `bufs_ptr` array."]
    pub num_bufs: __u32,
    #[doc = " @num_cmds: [in]"]
    #[doc = ""]
    #[doc = " Number of elements in the `cmds_ptr` array."]
    pub num_cmds: __u32,
    #[doc = " @gather_data_words: [in]"]
    #[doc = ""]
    #[doc = " Number of 32-bit words in the `gather_data_ptr` array."]
    pub gather_data_words: __u32,
    #[doc = " @bufs_ptr: [in]"]
    #[doc = ""]
    #[doc = " Pointer to an array of drm_tegra_submit_buf structures."]
    pub bufs_ptr: __u64,
    #[doc = " @cmds_ptr: [in]"]
    #[doc = ""]
    #[doc = " Pointer to an array of drm_tegra_submit_cmd structures."]
    pub cmds_ptr: __u64,
    #[doc = " @gather_data_ptr: [in]"]
    #[doc = ""]
    #[doc = " Pointer to an array of Host1x opcodes to be used by GATHER_UPTR"]
    #[doc = " commands."]
    pub gather_data_ptr: __u64,
    #[doc = " @syncobj_in: [in]"]
    #[doc = ""]
    #[doc = " Handle for DRM syncobj that will be waited before submission."]
    #[doc = " Ignored if zero."]
    pub syncobj_in: __u32,
    #[doc = " @syncobj_out: [in]"]
    #[doc = ""]
    #[doc = " Handle for DRM syncobj that will have its fence replaced with"]
    #[doc = " the job's completion fence. Ignored if zero."]
    pub syncobj_out: __u32,
    #[doc = " @syncpt_incr: [in,out]"]
    #[doc = ""]
    #[doc = " Information about the syncpoint the job will increment."]
    pub syncpt: drm_tegra_submit_syncpt,
}
#[test]
fn bindgen_test_layout_drm_tegra_channel_submit() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_channel_submit>(),
        64usize,
        concat!("Size of: ", stringify!(drm_tegra_channel_submit))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_channel_submit>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_tegra_channel_submit))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_channel_submit>())).context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_submit),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_channel_submit>())).num_bufs as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_submit),
            "::",
            stringify!(num_bufs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_channel_submit>())).num_cmds as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_submit),
            "::",
            stringify!(num_cmds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_channel_submit>())).gather_data_words as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_submit),
            "::",
            stringify!(gather_data_words)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_channel_submit>())).bufs_ptr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_submit),
            "::",
            stringify!(bufs_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_channel_submit>())).cmds_ptr as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_submit),
            "::",
            stringify!(cmds_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_channel_submit>())).gather_data_ptr as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_submit),
            "::",
            stringify!(gather_data_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_channel_submit>())).syncobj_in as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_submit),
            "::",
            stringify!(syncobj_in)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_channel_submit>())).syncobj_out as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_submit),
            "::",
            stringify!(syncobj_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_channel_submit>())).syncpt as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_channel_submit),
            "::",
            stringify!(syncpt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_syncpoint_allocate {
    #[doc = " @id: [out]"]
    #[doc = ""]
    #[doc = " ID of allocated syncpoint."]
    pub id: __u32,
    pub padding: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_syncpoint_allocate() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_syncpoint_allocate>(),
        8usize,
        concat!("Size of: ", stringify!(drm_tegra_syncpoint_allocate))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_syncpoint_allocate>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_syncpoint_allocate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_syncpoint_allocate>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpoint_allocate),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_syncpoint_allocate>())).padding as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpoint_allocate),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_syncpoint_free {
    #[doc = " @id: [in]"]
    #[doc = ""]
    #[doc = " ID of syncpoint to free."]
    pub id: __u32,
    pub padding: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_syncpoint_free() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_syncpoint_free>(),
        8usize,
        concat!("Size of: ", stringify!(drm_tegra_syncpoint_free))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_syncpoint_free>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_tegra_syncpoint_free))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_syncpoint_free>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpoint_free),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_syncpoint_free>())).padding as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpoint_free),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_tegra_syncpoint_wait {
    #[doc = " @timeout: [in]"]
    #[doc = ""]
    #[doc = " Absolute timestamp at which the wait will time out."]
    pub timeout_ns: __s64,
    #[doc = " @id: [in]"]
    #[doc = ""]
    #[doc = " ID of syncpoint to wait on."]
    pub id: __u32,
    #[doc = " @threshold: [in]"]
    #[doc = ""]
    #[doc = " Threshold to wait for."]
    pub threshold: __u32,
    #[doc = " @value: [out]"]
    #[doc = ""]
    #[doc = " Value of the syncpoint upon wait completion."]
    pub value: __u32,
    pub padding: __u32,
}
#[test]
fn bindgen_test_layout_drm_tegra_syncpoint_wait() {
    assert_eq!(
        ::std::mem::size_of::<drm_tegra_syncpoint_wait>(),
        24usize,
        concat!("Size of: ", stringify!(drm_tegra_syncpoint_wait))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_tegra_syncpoint_wait>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_tegra_syncpoint_wait))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_syncpoint_wait>())).timeout_ns as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpoint_wait),
            "::",
            stringify!(timeout_ns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_syncpoint_wait>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpoint_wait),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_syncpoint_wait>())).threshold as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpoint_wait),
            "::",
            stringify!(threshold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_tegra_syncpoint_wait>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpoint_wait),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drm_tegra_syncpoint_wait>())).padding as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_tegra_syncpoint_wait),
            "::",
            stringify!(padding)
        )
    );
}
pub const DRM_IOCTL_TEGRA_SYNCPOINT_ALLOCATE: __u64 = 3221775456;
pub const DRM_IOCTL_TEGRA_SYNCPOINT_FREE: __u64 = 3221775457;
pub const DRM_IOCTL_TEGRA_SYNCPOINT_WAIT: __u64 = 3222824034;
pub const DRM_IOCTL_TEGRA_CHANNEL_OPEN: __u64 = 3222824016;
pub const DRM_IOCTL_TEGRA_CHANNEL_CLOSE: __u64 = 3221775441;
pub const DRM_IOCTL_TEGRA_CHANNEL_MAP: __u64 = 3222299730;
pub const DRM_IOCTL_TEGRA_CHANNEL_UNMAP: __u64 = 3221775443;
pub const DRM_IOCTL_TEGRA_CHANNEL_SUBMIT: __u64 = 3225445460;
pub const DRM_IOCTL_TEGRA_GEM_CREATE: __u64 = 3222299712;
pub const DRM_IOCTL_TEGRA_GEM_MMAP: __u64 = 3222299713;
pub const DRM_IOCTL_TEGRA_SYNCPT_INCR: __u64 = 3221775427;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_gem_close {
    pub handle: __u32,
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_gem_close() {
    assert_eq!(
        ::std::mem::size_of::<drm_gem_close>(),
        8usize,
        concat!("Size of: ", stringify!(drm_gem_close))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_gem_close>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_gem_close))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_gem_close>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_gem_close),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_gem_close>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_gem_close),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_create {
    pub handle: __u32,
    pub flags: __u32,
}
#[test]
fn bindgen_test_layout_drm_syncobj_create() {
    assert_eq!(
        ::std::mem::size_of::<drm_syncobj_create>(),
        8usize,
        concat!("Size of: ", stringify!(drm_syncobj_create))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_syncobj_create>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_syncobj_create))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_create>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_create),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_create>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_create),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_destroy {
    pub handle: __u32,
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_syncobj_destroy() {
    assert_eq!(
        ::std::mem::size_of::<drm_syncobj_destroy>(),
        8usize,
        concat!("Size of: ", stringify!(drm_syncobj_destroy))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_syncobj_destroy>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_syncobj_destroy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_destroy>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_destroy),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_destroy>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_destroy),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_syncobj_wait {
    pub handles: __u64,
    pub timeout_nsec: __s64,
    pub count_handles: __u32,
    pub flags: __u32,
    pub first_signaled: __u32,
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_syncobj_wait() {
    assert_eq!(
        ::std::mem::size_of::<drm_syncobj_wait>(),
        32usize,
        concat!("Size of: ", stringify!(drm_syncobj_wait))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_syncobj_wait>(),
        8usize,
        concat!("Alignment of ", stringify!(drm_syncobj_wait))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_wait>())).handles as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_wait),
            "::",
            stringify!(handles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_wait>())).timeout_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_wait),
            "::",
            stringify!(timeout_nsec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_wait>())).count_handles as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_wait),
            "::",
            stringify!(count_handles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_wait>())).flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_wait),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_wait>())).first_signaled as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_wait),
            "::",
            stringify!(first_signaled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_syncobj_wait>())).pad as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_syncobj_wait),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_prime_handle {
    pub handle: __u32,
    pub flags: __u32,
    pub fd: __s32,
}
#[test]
fn bindgen_test_layout_drm_prime_handle() {
    assert_eq!(
        ::std::mem::size_of::<drm_prime_handle>(),
        12usize,
        concat!("Size of: ", stringify!(drm_prime_handle))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_prime_handle>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_prime_handle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_prime_handle>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_prime_handle),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_prime_handle>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_prime_handle),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_prime_handle>())).fd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_prime_handle),
            "::",
            stringify!(fd)
        )
    );
}
pub const DRM_IOCTL_GEM_CLOSE: __u64 = 1074291721;
pub const DRM_IOCTL_PRIME_HANDLE_TO_FD: __u64 = 3222037549;
pub const DRM_IOCTL_PRIME_FD_TO_HANDLE: __u64 = 3222037550;
pub const DRM_IOCTL_SYNCOBJ_CREATE: __u64 = 3221775551;
pub const DRM_IOCTL_SYNCOBJ_DESTROY: __u64 = 3221775552;
pub const DRM_IOCTL_SYNCOBJ_WAIT: __u64 = 3223348419;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_vgem_fence_attach {
    pub handle: __u32,
    pub flags: __u32,
    pub out_fence: __u32,
    pub pad: __u32,
}
#[test]
fn bindgen_test_layout_drm_vgem_fence_attach() {
    assert_eq!(
        ::std::mem::size_of::<drm_vgem_fence_attach>(),
        16usize,
        concat!("Size of: ", stringify!(drm_vgem_fence_attach))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_vgem_fence_attach>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_vgem_fence_attach))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_vgem_fence_attach>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_vgem_fence_attach),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_vgem_fence_attach>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_vgem_fence_attach),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_vgem_fence_attach>())).out_fence as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_vgem_fence_attach),
            "::",
            stringify!(out_fence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_vgem_fence_attach>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_vgem_fence_attach),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drm_vgem_fence_signal {
    pub fence: __u32,
    pub flags: __u32,
}
#[test]
fn bindgen_test_layout_drm_vgem_fence_signal() {
    assert_eq!(
        ::std::mem::size_of::<drm_vgem_fence_signal>(),
        8usize,
        concat!("Size of: ", stringify!(drm_vgem_fence_signal))
    );
    assert_eq!(
        ::std::mem::align_of::<drm_vgem_fence_signal>(),
        4usize,
        concat!("Alignment of ", stringify!(drm_vgem_fence_signal))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_vgem_fence_signal>())).fence as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_vgem_fence_signal),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drm_vgem_fence_signal>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(drm_vgem_fence_signal),
            "::",
            stringify!(flags)
        )
    );
}
pub const DRM_IOCTL_VGEM_FENCE_ATTACH: __u64 = 3222299713;
pub const DRM_IOCTL_VGEM_FENCE_SIGNAL: __u64 = 1074291778;
